machine:
  install:
    %{ if type == "worker" }
    wipe: true
    %{ endif }
  kubelet:
    image: "ghcr.io/siderolabs/kubelet:v${kubernetes_version}"
    extraArgs:
      cloud-provider: external # required for Proxmox CCM
      %{~ if node_group != null && node_group != "default" ~}
      register-with-taints: "node.home.lab/dedicated=${node_group}:NoExecute"
      %{~ endif ~}
    clusterDNS:
      - "${cidrhost(service_subnet, 10)}"
    nodeIP:
      validSubnets: ["${vm_subnet}"]
  %{ if length(sysctls) > 0 }
  sysctls:
  %{ for syskey, sysvalue in sysctls }
    ${syskey}: "${sysvalue}"
  %{ endfor }
  %{ endif }
  network:
    hostname: ${hostname}
    interfaces:
    %{~ for network in networks ~}
      - interface: ${network.interface}
        %{ if network.address != null }
        addresses: [${network.address}/${split("/", vm_subnet)[1]}]
        dhcp: false
        %{ else }
        dhcp: true
        %{ endif }
        %{ if type == "controlplane" }
        vip:
          ip: "${cluster_vip}"
        %{ endif }
    %{~ endfor ~}
  nodeLabels:
    topology.kubernetes.io/region: ${proxmox_cluster}
    topology.kubernetes.io/zone: ${proxmox_node}
    %{ if node_group != null }
    node.home.lab/group: ${node_group}
    %{ endif }
  systemDiskEncryption:
    state:
      provider: luks2
      options: ["no_read_workqueue", "no_write_workqueue"]
      keys:
        - nodeID: {}
          slot: 0
    ephemeral:
      provider: luks2
      options: ["no_read_workqueue", "no_write_workqueue"]
      keys:
        - nodeID: {}
          slot: 0
  features:
    %{ if type == "controlplane" }
    kubernetesTalosAPIAccess:
      enabled: true
      allowedRoles:
        - "os:reader"
        - "os:admin"
        - "os:etcd:backup"
      allowedKubernetesNamespaces:
        - "kube-system"
        - "operator-talos"
    %{ endif }

cluster:
  allowSchedulingOnControlPlanes: true
  network:
    cni:
      name: none
    podSubnets: [${pod_subnet}]
    serviceSubnets: [${service_subnet}]
  proxy:
    disabled: true
  apiServer:
    image: "registry.k8s.io/kube-apiserver:v${kubernetes_version}"
    resources:
      requests:
        cpu: "500m"
        memory: "1Gi"
  controllerManager:
    image: "registry.k8s.io/kube-controller-manager:v${kubernetes_version}"
  scheduler:
    image: "registry.k8s.io/kube-scheduler:v${kubernetes_version}"
  %{ if type == "controlplane" }
  etcd:
    advertisedSubnets: ["${vm_subnet}"]
    listenSubnets: ["${vm_subnet}"]
  %{ endif }
  externalCloudProvider:
    enabled: true
  inlineManifests:
    ${indent(4, yamlencode(inline_manifests))}
